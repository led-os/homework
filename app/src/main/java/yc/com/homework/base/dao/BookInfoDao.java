package yc.com.homework.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import yc.com.homework.read.domain.bean.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "BOOK_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CoverImg = new Property(3, String.class, "coverImg", false, "COVER_IMG");
        public final static Property VersionId = new Property(4, String.class, "versionId", false, "VERSION_ID");
        public final static Property Period = new Property(5, String.class, "period", false, "PERIOD");
        public final static Property PartType = new Property(6, String.class, "partType", false, "PART_TYPE");
        public final static Property Grade = new Property(7, String.class, "grade", false, "GRADE");
        public final static Property Subject = new Property(8, String.class, "subject", false, "SUBJECT");
        public final static Property VolumesId = new Property(9, String.class, "volumesId", false, "VOLUMES_ID");
        public final static Property IsDel = new Property(10, String.class, "isDel", false, "IS_DEL");
        public final static Property Sort = new Property(11, String.class, "sort", false, "SORT");
        public final static Property Press = new Property(12, String.class, "press", false, "PRESS");
        public final static Property SentenceCount = new Property(13, String.class, "sentenceCount", false, "SENTENCE_COUNT");
        public final static Property GradeName = new Property(14, String.class, "gradeName", false, "GRADE_NAME");
        public final static Property VersionName = new Property(15, String.class, "versionName", false, "VERSION_NAME");
        public final static Property Tag = new Property(16, String.class, "tag", false, "TAG");
        public final static Property SaveTime = new Property(17, long.class, "saveTime", false, "SAVE_TIME");
        public final static Property Favorite = new Property(18, int.class, "favorite", false, "FAVORITE");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BOOK_ID\" TEXT," + // 1: bookId
                "\"NAME\" TEXT," + // 2: name
                "\"COVER_IMG\" TEXT," + // 3: coverImg
                "\"VERSION_ID\" TEXT," + // 4: versionId
                "\"PERIOD\" TEXT," + // 5: period
                "\"PART_TYPE\" TEXT," + // 6: partType
                "\"GRADE\" TEXT," + // 7: grade
                "\"SUBJECT\" TEXT," + // 8: subject
                "\"VOLUMES_ID\" TEXT," + // 9: volumesId
                "\"IS_DEL\" TEXT," + // 10: isDel
                "\"SORT\" TEXT," + // 11: sort
                "\"PRESS\" TEXT," + // 12: press
                "\"SENTENCE_COUNT\" TEXT," + // 13: sentenceCount
                "\"GRADE_NAME\" TEXT," + // 14: gradeName
                "\"VERSION_NAME\" TEXT," + // 15: versionName
                "\"TAG\" TEXT," + // 16: tag
                "\"SAVE_TIME\" INTEGER NOT NULL ," + // 17: saveTime
                "\"FAVORITE\" INTEGER NOT NULL );"); // 18: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(4, coverImg);
        }
 
        String versionId = entity.getVersionId();
        if (versionId != null) {
            stmt.bindString(5, versionId);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(6, period);
        }
 
        String partType = entity.getPartType();
        if (partType != null) {
            stmt.bindString(7, partType);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(8, grade);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(9, subject);
        }
 
        String volumesId = entity.getVolumesId();
        if (volumesId != null) {
            stmt.bindString(10, volumesId);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(11, isDel);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(12, sort);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(13, press);
        }
 
        String sentenceCount = entity.getSentenceCount();
        if (sentenceCount != null) {
            stmt.bindString(14, sentenceCount);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(15, gradeName);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(16, versionName);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(17, tag);
        }
        stmt.bindLong(18, entity.getSaveTime());
        stmt.bindLong(19, entity.getFavorite());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(4, coverImg);
        }
 
        String versionId = entity.getVersionId();
        if (versionId != null) {
            stmt.bindString(5, versionId);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(6, period);
        }
 
        String partType = entity.getPartType();
        if (partType != null) {
            stmt.bindString(7, partType);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(8, grade);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(9, subject);
        }
 
        String volumesId = entity.getVolumesId();
        if (volumesId != null) {
            stmt.bindString(10, volumesId);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(11, isDel);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(12, sort);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(13, press);
        }
 
        String sentenceCount = entity.getSentenceCount();
        if (sentenceCount != null) {
            stmt.bindString(14, sentenceCount);
        }
 
        String gradeName = entity.getGradeName();
        if (gradeName != null) {
            stmt.bindString(15, gradeName);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(16, versionName);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(17, tag);
        }
        stmt.bindLong(18, entity.getSaveTime());
        stmt.bindLong(19, entity.getFavorite());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // versionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // period
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // partType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // grade
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subject
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // volumesId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isDel
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sort
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // press
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sentenceCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // gradeName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // versionName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tag
            cursor.getLong(offset + 17), // saveTime
            cursor.getInt(offset + 18) // favorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersionId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPeriod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPartType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGrade(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubject(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVolumesId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsDel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSort(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSentenceCount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGradeName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVersionName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTag(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSaveTime(cursor.getLong(offset + 17));
        entity.setFavorite(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
