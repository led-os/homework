package yc.com.homework.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import yc.com.answer.index.model.bean.BookAnswerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ANSWER_INFO".
*/
public class BookAnswerInfoDao extends AbstractDao<BookAnswerInfo, Long> {

    public static final String TABLENAME = "BOOK_ANSWER_INFO";

    /**
     * Properties of entity BookAnswerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "BOOK_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Cover_img = new Property(3, String.class, "cover_img", false, "COVER_IMG");
        public final static Property Year = new Property(4, int.class, "year", false, "YEAR");
        public final static Property Subject = new Property(5, String.class, "subject", false, "SUBJECT");
        public final static Property Press = new Property(6, String.class, "press", false, "PRESS");
        public final static Property Code = new Property(7, String.class, "code", false, "CODE");
        public final static Property Is_del = new Property(8, int.class, "is_del", false, "IS_DEL");
        public final static Property Sort = new Property(9, int.class, "sort", false, "SORT");
        public final static Property Share_num = new Property(10, int.class, "share_num", false, "SHARE_NUM");
        public final static Property Pv_num = new Property(11, int.class, "pv_num", false, "PV_NUM");
        public final static Property Version = new Property(12, String.class, "version", false, "VERSION");
        public final static Property Period = new Property(13, String.class, "period", false, "PERIOD");
        public final static Property Grade = new Property(14, String.class, "grade", false, "GRADE");
        public final static Property Part_type = new Property(15, String.class, "part_type", false, "PART_TYPE");
        public final static Property Access = new Property(16, int.class, "access", false, "ACCESS");
        public final static Property Favorite = new Property(17, int.class, "favorite", false, "FAVORITE");
        public final static Property Share_content = new Property(18, String.class, "share_content", false, "SHARE_CONTENT");
        public final static Property Author = new Property(19, String.class, "author", false, "AUTHOR");
        public final static Property Sex = new Property(20, int.class, "sex", false, "SEX");
        public final static Property Time = new Property(21, String.class, "time", false, "TIME");
        public final static Property SaveTime = new Property(22, long.class, "saveTime", false, "SAVE_TIME");
    }


    public BookAnswerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookAnswerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ANSWER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BOOK_ID\" TEXT," + // 1: bookId
                "\"NAME\" TEXT," + // 2: name
                "\"COVER_IMG\" TEXT," + // 3: cover_img
                "\"YEAR\" INTEGER NOT NULL ," + // 4: year
                "\"SUBJECT\" TEXT," + // 5: subject
                "\"PRESS\" TEXT," + // 6: press
                "\"CODE\" TEXT," + // 7: code
                "\"IS_DEL\" INTEGER NOT NULL ," + // 8: is_del
                "\"SORT\" INTEGER NOT NULL ," + // 9: sort
                "\"SHARE_NUM\" INTEGER NOT NULL ," + // 10: share_num
                "\"PV_NUM\" INTEGER NOT NULL ," + // 11: pv_num
                "\"VERSION\" TEXT," + // 12: version
                "\"PERIOD\" TEXT," + // 13: period
                "\"GRADE\" TEXT," + // 14: grade
                "\"PART_TYPE\" TEXT," + // 15: part_type
                "\"ACCESS\" INTEGER NOT NULL ," + // 16: access
                "\"FAVORITE\" INTEGER NOT NULL ," + // 17: favorite
                "\"SHARE_CONTENT\" TEXT," + // 18: share_content
                "\"AUTHOR\" TEXT," + // 19: author
                "\"SEX\" INTEGER NOT NULL ," + // 20: sex
                "\"TIME\" TEXT," + // 21: time
                "\"SAVE_TIME\" INTEGER NOT NULL );"); // 22: saveTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_ANSWER_INFO_BOOK_ID ON \"BOOK_ANSWER_INFO\"" +
                " (\"BOOK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ANSWER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookAnswerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String cover_img = entity.getCover_img();
        if (cover_img != null) {
            stmt.bindString(4, cover_img);
        }
        stmt.bindLong(5, entity.getYear());
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(6, subject);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(7, press);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(8, code);
        }
        stmt.bindLong(9, entity.getIs_del());
        stmt.bindLong(10, entity.getSort());
        stmt.bindLong(11, entity.getShare_num());
        stmt.bindLong(12, entity.getPv_num());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(14, period);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(15, grade);
        }
 
        String part_type = entity.getPart_type();
        if (part_type != null) {
            stmt.bindString(16, part_type);
        }
        stmt.bindLong(17, entity.getAccess());
        stmt.bindLong(18, entity.getFavorite());
 
        String share_content = entity.getShare_content();
        if (share_content != null) {
            stmt.bindString(19, share_content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(20, author);
        }
        stmt.bindLong(21, entity.getSex());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(22, time);
        }
        stmt.bindLong(23, entity.getSaveTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookAnswerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String cover_img = entity.getCover_img();
        if (cover_img != null) {
            stmt.bindString(4, cover_img);
        }
        stmt.bindLong(5, entity.getYear());
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(6, subject);
        }
 
        String press = entity.getPress();
        if (press != null) {
            stmt.bindString(7, press);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(8, code);
        }
        stmt.bindLong(9, entity.getIs_del());
        stmt.bindLong(10, entity.getSort());
        stmt.bindLong(11, entity.getShare_num());
        stmt.bindLong(12, entity.getPv_num());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
 
        String period = entity.getPeriod();
        if (period != null) {
            stmt.bindString(14, period);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(15, grade);
        }
 
        String part_type = entity.getPart_type();
        if (part_type != null) {
            stmt.bindString(16, part_type);
        }
        stmt.bindLong(17, entity.getAccess());
        stmt.bindLong(18, entity.getFavorite());
 
        String share_content = entity.getShare_content();
        if (share_content != null) {
            stmt.bindString(19, share_content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(20, author);
        }
        stmt.bindLong(21, entity.getSex());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(22, time);
        }
        stmt.bindLong(23, entity.getSaveTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookAnswerInfo readEntity(Cursor cursor, int offset) {
        BookAnswerInfo entity = new BookAnswerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cover_img
            cursor.getInt(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subject
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // press
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // code
            cursor.getInt(offset + 8), // is_del
            cursor.getInt(offset + 9), // sort
            cursor.getInt(offset + 10), // share_num
            cursor.getInt(offset + 11), // pv_num
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // version
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // period
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // grade
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // part_type
            cursor.getInt(offset + 16), // access
            cursor.getInt(offset + 17), // favorite
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // share_content
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // author
            cursor.getInt(offset + 20), // sex
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // time
            cursor.getLong(offset + 22) // saveTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookAnswerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCover_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.getInt(offset + 4));
        entity.setSubject(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_del(cursor.getInt(offset + 8));
        entity.setSort(cursor.getInt(offset + 9));
        entity.setShare_num(cursor.getInt(offset + 10));
        entity.setPv_num(cursor.getInt(offset + 11));
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPeriod(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGrade(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPart_type(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAccess(cursor.getInt(offset + 16));
        entity.setFavorite(cursor.getInt(offset + 17));
        entity.setShare_content(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAuthor(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSex(cursor.getInt(offset + 20));
        entity.setTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSaveTime(cursor.getLong(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookAnswerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookAnswerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookAnswerInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
